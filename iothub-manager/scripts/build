#!/usr/bin/env bash

# Debug|Release
CONFIGURATION=Release

set -e
APP_HOME="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )/"
source "$APP_HOME/scripts/.functions.sh"
cd $APP_HOME

check_dependencies() {
    set +e

    TEST=$(which nuget 2> /dev/null)
    if [[ -z "$TEST" ]]; then
        echo "ERROR: 'nuget' command not found. Install Mono 5.x first (http://www.mono-project.com/docs/about-mono/releases/5.0.0)."
        echo "Remember to add nuget's path to the PATH environment variable."
        exit 1
    fi

    TEST=$(which msbuild 2> /dev/null)
    if [[ -z "$TEST" ]]; then
        echo "ERROR: 'msbuild' command not found. Install Mono 5.x first (http://www.mono-project.com/docs/about-mono/releases/5.0.0)."
        echo "Remember to add msbuild's path to the PATH environment variable."
        exit 1
    fi

    TEST=$(which mono 2> /dev/null)
    if [[ -z "$TEST" ]]; then
        echo "ERROR: 'mono' command not found. Install Mono 5.x first (http://www.mono-project.com/docs/about-mono/releases/5.0.0)."
        echo "Remember to add mono's path to the PATH environment variable."
        exit 1
    fi

    TEST=$(which dotnet 2> /dev/null)
    if [[ -z "$TEST" ]]; then
        echo "ERROR: 'dotnet' command not found. Install .NET Core first (https://dotnet.github.io)."
        echo "Remember to add dotnet's path to the PATH environment variable."
        exit 1
    fi
    set -e
}

failed() {
    echo "Build failed"
    exit 1
}

compile() {
    nuget restore
    msbuild /m /p:Configuration=$CONFIGURATION
}

run_tests() {
    PROJECTS=$(dotnet sln list | grep 'csproj$' | grep '\.Test'| sed s#/.*##)
    for PROJ in $PROJECTS; do
        mono ./packages/xunit.runner.console.2.2.0/tools/xunit.console.exe $PROJ/bin/Release/$PROJ.dll
    done
}

check_dependencies
compile
run_tests
